package simpledb;
import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends AbstractDbIterator {

    private final DbIterator child1;
	private final DbIterator child2;
	private final JoinPredicate p;
	private boolean doneChild2 = false;
	private Tuple t1 = null;
	private boolean doneChild1 = false;

	/**
     * Constructor.  Accepts to children to join and the predicate
     * to join them on
     *
     * @param p The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
		this.p = p;
		this.child1 = child1;
		this.child2 = child2;
    }

    /**
     * @see simpledb.TupleDesc#combine(TupleDesc, TupleDesc) for possible implementation logic.
     */
    public TupleDesc getTupleDesc() {
    	return TupleDesc.combine(child1.getTupleDesc(),child2.getTupleDesc());
    }

    public void open()
        throws DbException, NoSuchElementException, TransactionAbortedException {
    	child1.open();
    	child2.open();
    	t1 = null;
    	doneChild2 = false;
    	doneChild1 = false;
    }

    public void close() {
    	child1.close();
    	child2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
    	child1.rewind();
    	child2.rewind();
    	t1 = null;
    	doneChild2 = false;
    	doneChild1 = false;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no more tuples.
     * Logically, this is the next tuple in r1 cross r2 that satisfies the join
     * predicate.  There are many possible implementations; the simplest is a
     * nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of
     * Join are simply the concatenation of joining tuples from the left and
     * right relation. Therefore, if an equality predicate is used 
     * there will be two copies of the join attribute
     * in the results.  (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple readNext() throws TransactionAbortedException, DbException {
    	Tuple tupleToReturn = null;
    	
    	while(!doneChild1 || !doneChild2){
    		if(!child1.hasNext()){
    			doneChild1 = true;
    		}
    			
    		if(null == t1 || (!doneChild1 && doneChild2))
    			 t1 = child1.next();
    		
    		while(child2.hasNext()){
    			Tuple t2 = child2.next();
    			
    			if(p.filter(t1, t2)){
    				tupleToReturn = new Tuple(getTupleDesc());
    				int c = 0;
    				for (int i = 0; i < t1.getTupleDesc().numFields(); i++) {
    					tupleToReturn.setField(c, t1.getField(i));
    					c++;
					}
    				for (int i = 0; i < t2.getTupleDesc().numFields(); i++) {
    					tupleToReturn.setField(c, t2.getField(i));
    					c++;
					}
    				break;
    			}
    		}
    		
    		if(null == tupleToReturn){
    			doneChild2 = true;
    			child2.rewind();
    		}
    		else{
    			doneChild2 = false;
    			break;
    		}
    	}
        // some code goes here
        return tupleToReturn;
    }
}
